---
name: Trivy Scan on Latest SemVer Image

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 2"

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Get latest SemVer tag from GitHub repo
        id: get-tag
        run: |
          tags=$(curl -s https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[].name')

          echo "Tags from GitHub:"
          echo "$tags"

          semver_tag=$(echo "$tags" | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)

          if [ -z "$semver_tag" ]; then
            echo "❌ No valid SemVer tags found."
            exit 1
          fi

          echo "✅ Latest SemVer tag: $semver_tag"
          echo "tag=$semver_tag" >> $GITHUB_OUTPUT

      - name: Run Trivy scan and output SARIF
        uses: aquasecurity/trivy-action@0.32.0
        continue-on-error: true
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ steps.get-tag.outputs.tag }}
          format: sarif
          output: trivy-results.sarif
          severity: MEDIUM,HIGH,CRITICAL

      - name: Upload SARIF file to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Check if Trivy report contains vulnerabilities
        id: check-vulns
        run: |
          count=$(jq '.runs[0].results | length' trivy-results.sarif)
          echo "Vulnerability count: $count"
          echo "count=$count" >> $GITHUB_OUTPUT

      - name: Generate Trivy issue summary
        if: steps.check-vulns.outputs.count != '0'
        run: |
          echo "# Vulnerabilities found in image \`ghcr.io/${{ github.repository }}:${{ steps.get-tag.outputs.tag }}\`" > trivy-results.md
          echo "" >> trivy-results.md
          echo "**Scan summary:**" >> trivy-results.md
          jq -r '.runs[0].results[] | "- \(.ruleId) in \(.locations[0].physicalLocation.artifactLocation.uri): \(.message.text)"' trivy-results.sarif >> trivy-results.md
          echo "" >> trivy-results.md
          echo "[View full scan results in GitHub Security tab](${{ github.server_url }}/${{ github.repository }}/security/code-scanning)" >> trivy-results.md

      - name: Create GitHub Issue for Vulnerabilities
        if: steps.check-vulns.outputs.count != '0'
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Trivy Scan: Vulnerabilities found in image `${{ steps.get-tag.outputs.tag }}`"
          content-filepath: trivy-results.md
          labels: security,trivy
